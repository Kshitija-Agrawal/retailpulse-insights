# -*- coding: utf-8 -*-
"""Capstone_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gqxUNxfbZ3ZInqcNc0uN-rcaOleWjKHd
"""

# Retail Sales Data Analysis Script
# Author: Kshitija Agrawal
# Skills: Python (Pandas, Matplotlib, Seaborn)

# 1. Import Libraries

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# 2. Load Dataset

df = pd.read_csv('/content/sample_data/Retail and wherehouse Sale.csv')

df.head()

df.shape

df.info()

df.describe()

df.isnull().sum()

# 3. Data Cleaning

# Fill missing supplier values
df['SUPPLIER'] = df['SUPPLIER'].fillna("Unknown")

# Fill missing Retail Sales values
df['RETAIL SALES'] = df['RETAIL SALES'].fillna(0)

# Find number of duplicated values
df.duplicated().sum()

# Number of unique value
df.nunique()

# Unique values in Month Column
df['MONTH'].unique()
df['MONTH'].value_counts()

# unique values in item type
df['ITEM TYPE'].unique()
df['ITEM TYPE'].value_counts()

# Create Total Sales column
df['TOTAL SALES'] = df['RETAIL SALES'] + df['WAREHOUSE SALES']

# Create Year-Month column
df['YEAR_MONTH'] = df['YEAR'].astype(str) + "-" + df['MONTH'].astype(str).str.zfill(2)

# Create Season column
def get_season(month):
    if month in [12, 1, 2]:
        return "Winter"
    elif month in [3, 4, 5]:
        return "Summer"
    elif month in [6, 7, 8]:
        return "Rainy"
    else:
        return "other"

df['SEASON'] = df['MONTH'].apply(get_season)

# =============================
# 4. Exploratory Data Analysis (EDA)
# =============================

# --- 4.1 Sales Trend Over Time ---
plt.figure(figsize=(12,6))
monthly_sales = df.groupby('YEAR_MONTH')['TOTAL SALES'].sum()
monthly_sales.plot(kind='line', marker='o')
plt.title("Total Sales Trend Over Time")
plt.xlabel("Year-Month")
plt.ylabel("Total Sales")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# --- 4.2 Seasonal Sales ---
plt.figure(figsize=(8,5))
sns.barplot(data=df, x='SEASON', y='TOTAL SALES', estimator=sum, ci=None, palette="Set2")
plt.title("Total Sales by Season")
plt.ylabel("Total Sales")
plt.show()

# --- 4.3 Sales by Item Type ---
plt.figure(figsize=(10,5))
sns.barplot(data=df, x='ITEM TYPE', y='TOTAL SALES', estimator=sum, ci=None, palette="muted")
plt.title("Total Sales by Item Type")
plt.ylabel("Total Sales")
plt.xticks(rotation=45)
plt.show()

# --- 4.4 Top 10 Suppliers ---
top_suppliers = df.groupby('SUPPLIER')['TOTAL SALES'].sum().nlargest(10)
plt.figure(figsize=(10,6))
sns.barplot(x=top_suppliers.values, y=top_suppliers.index, palette="Blues_r")
plt.title("Top 10 Suppliers by Sales")
plt.xlabel("Total Sales")
plt.ylabel("Supplier")
plt.show()

# --- 4.5 Top 10 Items ---
top_items = df.groupby('ITEM DESCRIPTION')['TOTAL SALES'].sum().nlargest(10)
plt.figure(figsize=(10,6))
sns.barplot(x=top_items.values, y=top_items.index, palette="Greens_r")
plt.title("Top 10 Items by Sales")
plt.xlabel("Total Sales")
plt.ylabel("Item Description")
plt.show()

# --- 4.6 Heatmap â†’ Sales by Month vs Year (shows seasonal peaks) ---
pivot = df.pivot_table(values="TOTAL SALES", index="YEAR", columns="MONTH", aggfunc="sum")
plt.figure(figsize=(12,6))
sns.heatmap(pivot, cmap="YlGnBu", annot=True, fmt=".0f")
plt.title("Seasonal Sales Heatmap (Year vs Month)")
plt.show()

import plotly.express as px

fig = px.treemap(df, path=['SUPPLIER'], values='TOTAL SALES',
                 title="Supplier Contribution to Sales")
fig.show()